#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#


    Dear all,
    during the last Interoperability Meeting I presented some issues that me
    and my colleagues encountered in implementing a VOSpace service following
    the recommendation document. Since the limits that we found could lead to
    the definition of a new version of the specification it has been suggested
    to open a thread in this mailing list, to discuss them with the whole
    community.

    We are proposing several points, so I'll number them.

    1. Add a standard property to indicate that node metadata can be edited
    (e.g. groupread property can be changed), but the node can't be deleted or
    moved. Suggested names: locked or sticky

    2. Add a standard property to indicate that a data node doesn't contain its
    data yet (so data has to be retrieved using a pullToVoSpace operation
    before being able to download the data using a pullFromVoSpace).

    3. Allow to specify multiple target nodes (instead of exactly one target
    node) for transfer operations. This is useful if the user desires to select
    a subset of files inside a folder instead of the whole folder.

    4. Add a mechanism to update certain metadata recursively on all child
    nodes. It is particularly useful for setting groupread and groupwrite
    properties.

    5. If the previous point will be added to the recommendation, it could be
    useful to specify also how a recursive group update should behave. Suppose
    for example to have a parent node having groupread="group1" and a child
    node having groupread="group2". If the user wants to add group3
    recursively, a simple recursive setNode would set "group1,group3" on all
    the nodes (like a chgrp -R command would do). However, from a user
    perspective, maybe it would be preferable to have "group1,group3" on the
    parent node and "group2,group3" on the child node (so the operation would
    be smart enough to consider the addition or deletion of groups, instead of
    a plain set).

    6. Clarify what to use as folder size (should it be the total size of its
    content?)

    7. On the getNode endpoint add parameters to perform paginated requests.
    Useful for nodes having too many children.

    8. Clarify how to define a custom delimiter for properties having multiple
    values. Recommendation says «When a Property can take multiple values,
    e.g., a list of groups which can access a particular resource, these SHOULD
    be comma-separated, unless the property description defines a specific
    delimiter.», however property description is a free text field and it could
    be hard to parse the custom delimiter value from it using automatic tools.

# -----------------------------------------
Re: Proposals for VOSpace (immutable data)Hi Sonia,

    Hi Sonia,
    You raised several good suggestions in your email. To avoid confusion I'll reply to each one in a separate email thread.

        1. Add a standard property to indicate that node metadata can be edited
        (e.g. groupread property can be changed), but the node can't be deleted or
        moved. Suggested names: locked or sticky

    I agree this would be useful. Perhaps suggest 'immutable' as the property name?

        immutable = True|False, default False

        ivo://ivoa.net/vospace/core#immutable


# -----------------------------------------
Re: Proposals for VOSpace (data staging property)

    Hi Sonia,
    You raised several good suggestions in your email. To avoid confusion I'll reply to each one in a separate email thread.

        2. Add a standard property to indicate that a data node doesn't contain its
        data yet (so data has to be retrieved using a pullToVoSpace operation
        before being able to download the data using a pullFromVoSpace).

    At the moment, this is fairly specific to your use case. I can see how this might
    be useful in other cases, but it would need some work to make it generic.

    As I understand it, if this property is True, then the client needs to initiate
    an internal data transfer from your tape system to your file transfer system,
    using an internal transfer protocol, before an external data transfer can access
    the data. Which works, because your client knows what this property means and what
    action it needs to take.

    I'm not (yet) convinced that there is a case for making this property part of the
    IVOA standard(*). However, I think Sara and I may need to have something similar
    for the VOSpace/Rucio bridge we are working on, so perhaps we can work together
    to create a generic solution that could eventually become part of the IVOA standard.


# -----------------------------------------
Re: Proposals for VOSpace (multiple targets)

    Hi Sonia,
    You raised several good suggestions in your email. To avoid confusion I'll reply to each one in a separate email thread.

            3. Allow to specify multiple target nodes (instead of exactly one target
            node) for transfer operations. This is useful if the user desires to select
            a subset of files inside a folder instead of the whole folder.

    This works in your specific case because your staging transfer protocol handles multiple files.
    If we added support for multiple target nodes in the standard, we would need to define how this
    would work for all the other transfer protocols.

    Specifically, what does this mean?

        <vos:target>vos://..../file-one</vos:target>
        <vos:target>vos://..../file-two</vos:target>
        <vos:direction>pullFromVoSpace</vos:direction>
        <vos:protocol uri="ivo://ivoa.net/vospace/core#httpget"/>

    Concatenating the content of the two files into one http stream is probably not what was intended.

    The standard allows the service to offer multiple protocol endpoints for a single transfer.
    If we added support for multiple targets, then we would need to define how to link the
    different targets to the different endpoints.

        <vos:transfer xmlns:vos="http://www.ivoa.net/xml/VOSpace/v2.0" version="2.1">
            ....
            <vos:target>vos://..../file-one</vos:target>
            <vos:target>vos://..../file-two</vos:target>
            ....
            <vos:protocol uri="ivo://ivoa.net/vospace/core#httpget">
                <!--+
                    | Would this get one or both targets?
                    | If only one, how do we identify which one?
                    +-->
                <vos:endpoint>http://..../Wahb9Elu</vos:endpoint>
            </vos:protocol>
            <vos:protocol uri="ivo://ivoa.net/vospace/core#httpget">
                <!--+
                    | Would this get one or both targets?
                    | If only one, how do we identify which one?
                    +-->
                <vos:endpoint>http://..../ruphoh4B</vos:endpoint>
            </vos:protocol>
        </vos:transfer>

    If we added support for multiple targets, would this include targets from different
    locations? If not, then we would need to define how we would prevent them.

        <vos:targets>
            <!--+
                | This is a target in the CADC VOSpace.
                +-->
            <vos:target>vos://CADC/..../file-one</vos:target>
            <!--+
                | This is a target in the INAF VOSpace.
                +-->
            <vos:target>vos://INAF/..../file-two</vos:target>
            ....
            <vos:protocol uri="ivo://ivoa.net/vospace/core#httpget">
                <!--+
                    | Would this get data from both spaces?
                    +-->
                <vos:endpoint>http://..../cie2AiD8</vos:endpoint>
            </vos:protocol>

        </vos:targets>

    As it stands I think this raises too many complications.

    There is perhaps a simpler solution using the existing standard.

    * Create a container node.
    * Use links to add the intended targets to the container.
    * Apply the staging transfer to the container node.

    I think this achieves the same goal, of transferring multiple targets in a single transfer,
    in a way that is understandable to both generic VOSpace clients and to human users, without
    requiring a change to the standard.


# -----------------------------------------
Re: Proposals for VOSpace (recursive metadata changes)

    Hi Sonia,
    You raised several good suggestions in your email. To avoid confusion I'll reply to each one in a separate email thread.

        4. Add a mechanism to update certain metadata recursively on all child
        nodes. It is particularly useful for setting groupread and groupwrite
        properties.

    This sounds like a useful extension that at least one other site has also implemented.

    I agree with Pat, it probably makes sense to use UWS to implement this as an asynchronous operation.

    If so, would it be a separate stand-alone UWS service, or do we define it as an optional service capability in the VOSpace specification?

    Perhaps Pat or Brian could describe how their service makes this option available to clients ?

# -----------------------------------------

    5. If the previous point will be added to the recommendation, it could be
    useful to specify also how a recursive group update should behave.

    Yep, agree.

# -----------------------------------------
Re: Proposals for VOSpace (content size)

    Hi Sonia,
    You raised several good suggestions in your email. To avoid confusion I'll reply to each one in a separate email thread.

        6. Clarify what to use as folder size (should it be the total size of its content?)

    Content size is hard to do because VOSpace is not just a file storage system. VOSpace is, as the name implies,
    an abstract space to access data. It can be used to store files, but that is just one use case.

    For example, a node in VOSpace can represent an image. The VOSpace service can provide different views ofthe image,
    e.g. JPEG, PNG or FITS, full size, cutout or thumbnail. Each of the views would have a different number of bytes.

    Several image nodes could be put in a container node. The VOSpace service can provide different views of the container,
    e.g. HTML page with thumbnails, tar.gz file or a SIAP service.

    Only one of these, the tar,gz file, has a size in bytes. The others are abstract views for accessing the data.
    Even in the simplest case, a tar.gz of the original image files, there are two content sizes, the total size
    of all the images, or the size of the compressed tar.gz file.

    For tabular data, a VOSpace node can represent a database table. The VOSpace service can provide different views
    of the table, e.g. VOTable or FITS file, but the size of the downloadable content of those views is not directly
    related to the size on disc that the database service uses to store the data.

    In this example, it is likely that the content of the VOTable or FITS files would be generated on demand, streaming
    the data in response to a HTTP GET request. In which case the server would never see the whole of the content as an
    entity that could be measured.

    Several table nodes could be put in a container node. The VOSpace service can provide different views of the container,
    e.g. HTML listing page, multi-table VOTable file or a TAP service.

    Only one of these, multi-table VOTable file, has a size in bytes, but again, the content would probably be generated
    on the fly in response to a HTTP GET request, so the server would never see the whole content as a measurable object.

    I think the best we can do is say how many things (images or tables) the container contains. If we try to do anything
    more, we will end up presenting the right value for one view and the wrong value for all the other views.


# -----------------------------------------
    Re: Proposals for VOSpace (paginated response)

    Hi Sonia,
    You raised several good suggestions in your email. To avoid confusion I'll reply to each one in a separate email thread.

            7. On the getNode endpoint add parameters to perform paginated requests.
            Useful for nodes having too many children.

    Paginated response sounds simple, but it turns out to be complicated to implement.

    We would need to define a design that does not put a heavy load on the server, can reliably handle the insertion
    or deletionof nodes between requests without producing duplicate rows in the results, and does not require the
    use of a relational database to implement it.

    As far as I know, everyone who has looked at this has decided that it is easier to do it on the client side than
    on the server side. Perhaps someone would like to look at this again and propose a definition for how a paginated
    response could work?

    For me, I see pagination as a client side display function rather than a server side data access function.
    Is there a strong use case for doing this on the server side ?

    Bear in mind that even if we did define a new property for pagination, existing version 2.1 services would not
    understand it. So unless we make the new property mandatory, everyone adopts the new standard, and we deprecate
    the version 2.1 standard, clients would still have to cope with large responses from version 2.1 services.


# -----------------------------------------
Re: Proposals for VOSpace (paginated response)

Hi Sonia,
You raised several good suggestions in your email. To avoid confusion I'll reply to each one in a separate email thread.

    8. Clarify how to define a custom delimiter for properties having multiple values.


