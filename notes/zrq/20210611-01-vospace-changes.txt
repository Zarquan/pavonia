#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#


    Dear all,
    during the last Interoperability Meeting I presented some issues that me
    and my colleagues encountered in implementing a VOSpace service following
    the recommendation document. Since the limits that we found could lead to
    the definition of a new version of the specification it has been suggested
    to open a thread in this mailing list, to discuss them with the whole
    community.

    We are proposing several points, so I'll number them.

    1. Add a standard property to indicate that node metadata can be edited
    (e.g. groupread property can be changed), but the node can't be deleted or
    moved. Suggested names: locked or sticky

    2. Add a standard property to indicate that a data node doesn't contain its
    data yet (so data has to be retrieved using a pullToVoSpace operation
    before being able to download the data using a pullFromVoSpace).

    3. Allow to specify multiple target nodes (instead of exactly one target
    node) for transfer operations. This is useful if the user desires to select
    a subset of files inside a folder instead of the whole folder.

    4. Add a mechanism to update certain metadata recursively on all child
    nodes. It is particularly useful for setting groupread and groupwrite
    properties.

    5. If the previous point will be added to the recommendation, it could be
    useful to specify also how a recursive group update should behave. Suppose
    for example to have a parent node having groupread="group1" and a child
    node having groupread="group2". If the user wants to add group3
    recursively, a simple recursive setNode would set "group1,group3" on all
    the nodes (like a chgrp -R command would do). However, from a user
    perspective, maybe it would be preferable to have "group1,group3" on the
    parent node and "group2,group3" on the child node (so the operation would
    be smart enough to consider the addition or deletion of groups, instead of
    a plain set).

    6. Clarify what to use as folder size (should it be the total size of its
    content?)

    7. On the getNode endpoint add parameters to perform paginated requests.
    Useful for nodes having too many children.

    8. Clarify how to define a custom delimiter for properties having multiple
    values. Recommendation says «When a Property can take multiple values,
    e.g., a list of groups which can access a particular resource, these SHOULD
    be comma-separated, unless the property description defines a specific
    delimiter.», however property description is a free text field and it could
    be hard to parse the custom delimiter value from it using automatic tools.

# -----------------------------------------

    1. Add a standard property to indicate that node metadata can be edited
    (e.g. groupread property can be changed), but the node can't be deleted or
    moved. Suggested names: locked or sticky

    Agree this would be useful, but the name could be more descriptive.
    Suggest

        immutable   = True|False, default False

        ivo://ivoa.net/vospace/core#immutable

# -----------------------------------------

    2. Add a standard property to indicate that a data node doesn't contain its
    data yet (so data has to be retrieved using a pullToVoSpace operation
    before being able to download the data using a pullFromVoSpace).

    This is verys specific to your use case.

    How would a generic client, with no prior knowledge of your platform
    know how to make use of this property ?

    As I understand it, if this property is True, then the client has
    to initiate a transfer of data from your internal tape system to
    your internal file transfer system, using a proprietary transfer
    protocol that is specific to your platform.

    All of that works, and accomodating internal proprietary transfer
    protocols was part of the original intention of the VOSpace design.

    At the moment I don't see a use case for the global international
    standard to define properties or transfer protocols that are
    only relevant to your specific site.

    The client needs to know that if this property is False, the client
    is responsible for using a specific internal transfer protocol to
    retrieve the data from tape.

    A generic client wouldn't know which protocol to use, nor would
    it know the specific details of how to use your internal tape
    retreival protocol.

    This is exactly why the VOSpace standard specifically allows
    site specific properties and protocols.

    Clients that understand how your internal system works can use
    the site specific properties and transfer protocols to achieve
    what they need.

    If you would like to have a publicly resolvable identifier
    for your properties and transfer protofcols, then there are a couple
    of options you could try.

    Simplest is to create a wiki page that describes your properties
    and protocol and then use the URL of the page as the property
    or protocol identifier.

        urn:ia2:populated
        urn:ia2:async-trans

    become

        https://wiki.ivoa.net/twiki/bin/view/IVOA/INAFVOSpace#populated
        https://wiki.ivoa.net/twiki/bin/view/IVOA/INAFVOSpace#async-trans

    If you would like a more formal regsitration of your properties then
    you are encouraged to register your own identifiers in the IVOA registry,
    using your authority identifier.

    e.g.

        urn:ia2:populated
        urn:ia2:async-trans

    become

        ivo://ia2.inaf.it/vospace/tape-store#populated

            True|False, default False

            A True|False flag to indicate if the data is poulated
            or need to be recalled from the INAF tape system.

        ivo://ia2.inaf.it/vospace/tape-store#async-recall

            An internal data transfer protocol to retreive data from
            the INAF tape storage system


    These would be regsitered in the IVOA registry, making them permanent
    and accessible to all, but using your registry authority identifier
    which keeps them specific to your site.


# -----------------------------------------

    3. Allow to specify multiple target nodes (instead of exactly one target
    node) for transfer operations. This is useful if the user desires to select
    a subset of files inside a folder instead of the whole folder.

    This works in your specific case because your internal transfer protocol
    handles multiple files.

    If we allow multiple target nodes, we would need to define how this would
    work for the existing transfer protocols.

    Specifically, what does this mean ?

        <vos:targets>
            <vos:target>vos://..../file-one</vos:target>
            <vos:target>vos://..../file-two</vos:target>
        </vos:targets>
        <vos:direction>pullFromVoSpace</vos:direction>
        <vos:protocol uri="ivo://ivoa.net/vospace/core#httpget"/>

    Concatenating the content of the two files into one http stream is probably not what was intended.

    The standard allows the service to offer multiple protocol endpoints for a single transfer

        <vos:transfer xmlns:vos="http://www.ivoa.net/xml/VOSpace/v2.0" version="2.1">
            <vos:target>vos://..../file-one</vos:target>
            </vos:targets>
            <vos:direction>pullFromVoSpace</vos:direction>
            <vos:protocol uri="ivo://ivoa.net/vospace/core#httpget">
                <vos:endpoint>http://..../Wahb9Elu</vos:endpoint>
            </vos:protocol>
            <vos:protocol uri="ivo://ivoa.net/vospace/core#httpget">
                <vos:endpoint>http://..../cie2AiD8</vos:endpoint>
            </vos:protocol>
        </vos:transfer>

    If we allowed multiple targets, then how would we link the different targets to the offered endpoints ?

        <vos:transfer xmlns:vos="http://www.ivoa.net/xml/VOSpace/v2.0" version="2.1">
            <vos:target>vos://..../file-one</vos:target>
            <vos:target>vos://..../file-two</vos:target>
            <vos:direction>pullFromVoSpace</vos:direction>
            <vos:protocol uri="ivo://ivoa.net/vospace/core#httpget">
                <vos:endpoint>http://..../Wahb9Elu</vos:endpoint> <-- which target would this get ?
            </vos:protocol>
            <vos:protocol uri="ivo://ivoa.net/vospace/core#httpget">
                <vos:endpoint>http://..../cie2AiD8</vos:endpoint>
            </vos:protocol>
        </vos:transfer>

    If we allowed multiple targets, would we allow the targets to come from different locations ?

        <vos:targets>
            <vos:target>vos://CADC/..../file-one</vos:target>
            <vos:target>vos://INAF/..../file-two</vos:target>
        </vos:targets>

    In short, this raises too many complications.

    There is perhaps a simpler solution using the existing standard.

    * Create a container node in your VOSpace.
    * Use links to add the intended targets to the container.
    * Apply the internal data transfer to the container node.

    This acheives the transfer of multiple targets in one atomic step
    which you require in a way that is clear and understandable to
    to generic VOSpace clients and to human users.

# -----------------------------------------

    4. Add a mechanism to update certain metadata recursively on all child
    nodes. It is particularly useful for setting groupread and groupwrite
    properties.

    I agree with Pat, using UWS to implement this as an asynchronous operation
    makes sense.

# -----------------------------------------

    5. If the previous point will be added to the recommendation, it could be
    useful to specify also how a recursive group update should behave.

    Yep, agree.

# -----------------------------------------

    6. Clarify what to use as folder size (should it be the total size of its
    content?)

    This is hard to do because VOSpace is *not* a file storage system
    VOSpace is designed as an abstract space to access data.

    It can be used to store files, but that is just one use case.

    For example, a node in VOSpace can represent an image.
    The VOSpace service can provide different views of the image, e.g. JPEG, PNG or FITS, full size, cutout or thumbnail.
    Each of the views would have a different number of bytes.

    Several image nodes could be put in a container node.
    The VOSpace service can provide different views of the container, e.g. HTML listing page, tar.gz file or a SIAP service.

    Only one of these, the tar,gz file, has a size in bytes.
    The others are abstract views for accessing the data.

    For tabular data, a VOSpace node can represent a database table.
    The VOSpace service can provide different views of the table, e.g. VOTable or FITS file, but the size of the downloadable content
    of those views is not directly related to the size on disc that the database service uses to store the data.

    In this example, it is likley that the content of the VOTable or FITS files would be generated on demand,
    streaming the data in response to a HTTP GET request.
    In which case the server would never see the whole of the content as an entity that could be measured.

    Several table nodes could be put in a container node.
    The VOSpace service can provide different views of the container, e.g. HTML listing page, multi-table VOTable file or a TAP service.

    Only one of these, multi-table VOTable file, has a size in bytes, but again, the content would probably be
    generated on the fly in response ot a HTTP GET request, so the server would never see the whole
    content as a measurable object.

# -----------------------------------------

    7. On the getNode endpoint add parameters to perform paginated requests.
    Useful for nodes having too many children.

    This sounds simple but is actually very complicated to implement.

    The requirement is to describe a design that does not put a heavy load on the
    server, can reliably handle the deletion or insertion of nodes
    between page requests without producing duplicate rows in the results
    and does not require the use of a relational database to implement it.

# -----------------------------------------

    8. Clarify how to define a custom delimiter for properties having multiple
    values.

    Can you describe the use case for this ?

    If the property is one of the standard properties defined in the VOSpace standard,
    then presumably the standard would define what the delimiter is.

    For a custom property, the assumption is that if I include a custom property,
    e.g. urn:dave:custom-one in the metadata for a node, then that property is only
    relevant to client software that is designed to handle it.

    Generic clients are free to either treat it as a string or to ignore the property completely.

    If I design my client to read my custom property, then I will know
    what the delimiter is, because I defined the property.

    If you want a way for others to know what your property contains, then
    you can add a descriton of the property, its content, meaning and delimiter
    in the resource that is pointed to by your property identifier.

    For example I can use a wiki page to descibe my custom property, and use
    the URL of that wiki page to tell other people what my property contains.

    For example instead of using this URI

        urn:dave:custom-one

    I could use this URL

        https://wiki.ivoa.net/twiki/bin/view/IVOA/MyCustomProperty20210611

    That way devlopers of client software would be able to find out what my custom
    property cntains and how to interpret it.

    In theory we could define a way to publish a machine readable schema for describing the
    content of a custom property.
    Perhaps by linking or embedding a the schema in the property description.

    However, although this would enable a generic client to
    understand that this is a list of things, and what the delimiter is,
    the client would still not know what to do with the values in the list.

    We would need some kind of data model to be able to tell a generic client
    that my custom property contained a list of names of colours,
    and how the client should use them.









            urn:ia2:populated
        urn:ia2:async-trans

    become

        ivo://ia2.inaf.it/vospace/tape-store#populated

            True|False, default False

            A True|False flag to indicate if the data is poulated
            or need to be recalled from the INAF tape system.

